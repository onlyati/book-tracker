openapi: 3.1.0
info:
  title: Book tracker API
  description: >-
    This server provide access for the data and services regarding book-tracker.
    Normally this is used by the frontend service
  contact:
    email: onlyati@pm.me
  version: "1"
tags:
  - name: user
    description: User settings related endpoints
  - name: category
    description: Category related endpoints
  - name: book
    description: Book related endpoints
servers:
  - url: "http://{{.HostName}}:{{.Port}}"
    description: Host server
paths:
  /api/user/v1:
    get:
      tags:
        - user
      summary: Get user information
      parameters:
        - name: name
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Parameter is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: User does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - user
      summary: Get user information
      parameters:
        - name: name
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Parameter is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: User does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - user
      summary: Update user's name
      parameters:
        - name: id
          in: query
          schema:
            type: number
        - name: new_name
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Parameter is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User id does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: User does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - user
      summary: Soft delete user
      parameters:
        - name: id
          in: query
          schema:
            type: number
      responses:
        200:
          description: Successful operation
        400:
          description: Parameter is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: User does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/v1/list:
    get:
      tags:
        - user
      summary: List users
      parameters:
        - name: id
          in: query
          schema:
            type: number
      responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  type: array
                  items: 
                    $ref: "#/components/schemas/User"
          400:
            description: Parameter is missing
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          500:
            description: User does not exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
  /api/category/v1:
    get:
      tags:
        - category
      summary: Get category information
      parameters:
        - name: name
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        400:
          description: Parameter is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Category does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Category does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - category
      summary: Create new category
      parameters:
        - name: name
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        400:
          description: Parameter is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Category does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - category
      summary: Update category's name
      parameters:
        - name: id
          in: query
          schema:
            type: number
        - name: new_name
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        400:
          description: Parameter is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Category id does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Category does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - category
      summary: Soft delete category
      parameters:
        - name: id
          in: query
          schema:
            type: number
      responses:
        200:
          description: Successful operation
        400:
          description: Parameter is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Category does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/category/v1/list:
    get:
      tags:
        - category
      summary: List categories
      parameters:
        - name: id
          in: query
          schema:
            type: number
      responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  type: array
                  items: 
                    $ref: "#/components/schemas/Category"
          400:
            description: Parameter is missing
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          500:
            description: Category does not exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
  /api/book/v1:
    get:
      tags:
        - book
      summary: Get all details from a specific book
      parameters:
        - name: id
          in: query
          schema:
            type: number
      responses:
        200:
          description: Successful operation
          content:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Book"
        400:
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Book does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Category does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - book
      summary: Create a new book based on ISBN number
      parameters:
        - name: isbn
          in: query
          schema:
            type: number
      responses:
        200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Book"
        400:
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Category does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/book/v1/list:
    get:
      tags:
        - book
      summary: List registered books
      parameters:
        - name: index
          in: query
          schema:
            type: number
      responses:
        200:
          description: Successful operation
          content:
            content:
              application/json:
                schema:
                  type: array
                  items: 
                    $ref: "#/components/schemas/Book"
        400:
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Book does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Category does not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
    Book:
      type: object
      properties:
        id:
          type: number
        created_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        updated_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        deleted_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        title:
          type: string
        number_of_pages:
          type: number
        cover:
          type: string
          description: file name for the cover
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        authors:
          type: array
          items:
            $ref: "#/components/schemas/Author"
    Author:
      type: object
      properties:
        id:
          type: number
        created_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        updated_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        deleted_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        name:
          type: string
        alternate_names:
          type: string
    User:
      type: object
      properties:
        id:
          type: number
        created_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        updated_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        deleted_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        name:
          type: string
    Category:
      type: object
      properties:
        id:
          type: number
        created_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        updated_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        deleted_at:
          type: string
          format: "1970-01-01T12:00:00.000000Z"
        name:
          type: string
